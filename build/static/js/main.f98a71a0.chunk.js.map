{"version":3,"sources":["app/Navbar.js","features/posts/PostsList.js","features/posts/postsSlice.js","features/posts/AddPostForm.js","App.js","api/server.js","app/store.js","index.js"],"names":["Navbar","className","PostsList","renderedPosts","useSelector","state","posts","map","post","title","type","onClick","DeletePosts","id","content","substring","e","postsSlice","createSlice","name","initialState","reducers","postAdded","action","push","payload","deletePosts","items","filter","item","index","actions","AddPostForm","useState","setTitle","setContent","dispatch","useDispatch","htmlFor","value","onChange","target","nanoid","App","seedDate","exact","path","render","Fragment","to","configureStore","reducer","postsReducer","IdSerializer","RestSerializer","extend","serializeIds","rng","seedrandom","randomSeedString","localStorage","getItem","getRandomInt","min","max","Math","ceil","floor","Date","toISOString","setItem","setRandom","faker","seed","getTime","randomFromArray","array","length","notificationTemplates","Server","routes","this","namespace","resource","server","schema","req","data","normalizedRequestAttrs","date","user","users","find","userId","Error","create","get","params","postId","comments","pastDate","numNotifications","now","queryParams","since","parseISO","valueOf","setMinutes","getMinutes","notifications","Array","db","template","between","message","read","isNew","models","Model","hasMany","belongsTo","comment","notification","factories","Factory","firstName","lastName","findName","username","internet","userName","afterCreate","createList","sentence","recent","article","reactions","thumbsUp","hooray","heart","rocket","eyes","association","past","text","paragraph","serializers","seeds","ReactDOM","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.f98a71a0.chunk.js","sourcesContent":["import React from 'react'\n\nexport const Navbar = () => {\n  return (\n    <nav>\n      <section>\n        <h1>Redux Essentials Example</h1>\n\n        <div className=\"navContent\">\n          <div className=\"navLinks\"></div>\n        </div>\n      </section>\n    </nav>\n  )\n}\n","import React from 'react'\nimport { useSelector } from 'react-redux'\n// import { useDispatch } from \"react-redux\";\n// import { deletePosts } from \"./postsSlice\";\n\nexport const PostsList = () => {\n  const posts = useSelector((state) => state.posts)\n\n  const renderedPosts = posts.map((post) => (\n    <article className=\"post-excerpt\" key={post.id}>\n      <h3>{post.title}</h3>\n      <button type=\"button\" onClick={DeletePosts} key={post.id}>DELETE</button>\n      <p className=\"post-content\">{post.content.substring(0, 100)}</p>\n    </article>\n  ))\n\n  const DeletePosts = (e) => {\n    // dispatch(deletePosts(e.target.getAttribute(\"key\")));\n  };\n\n  return (\n    <section className=\"posts-list\">\n      <h2>Posts</h2>\n      {renderedPosts}\n    </section>\n  )\n}\n","import { createSlice } from '@reduxjs/toolkit'\n\nconst initialState = [\n  { id: '1', title: 'First Post!', content: 'Hello!' },\n  { id: '2', title: 'Second Post', content: 'More text' },\n]\n\nconst postsSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {\n    postAdded(state, action) {\n      state.push(action.payload)\n    },\n    deletePosts(state, action) {\n      state.items = state.items.filter(\n        (item, index) => item.id !== action.payload\n      );\n    },\n  },\n})\n\nexport const { postAdded } = postsSlice.actions\n\nexport const { deletePosts } = postsSlice.actions;\n\nexport default postsSlice.reducer\n","import React, { useState } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { nanoid } from '@reduxjs/toolkit'\n\nimport { postAdded } from './postsSlice'\n\nexport const AddPostForm = () => {\n  const [title, setTitle] = useState('')\n  const [content, setContent] = useState('')\n\n  const dispatch = useDispatch()\n\n  const onTitleChanged = (e) => setTitle(e.target.value)\n  const onContentChanged = (e) => setContent(e.target.value)\n\n  const onSavePostClicked = () => {\n    if (title && content) {\n      dispatch(\n        postAdded({\n          id: nanoid(),\n          title,\n          content,\n        })\n      )\n\n      setTitle('')\n      setContent('')\n    }\n  }\n\n  return (\n    <section>\n      <h2>Add a New Post</h2>\n      <form>\n        <label htmlFor=\"postTitle\">Post Title:</label>\n        <input\n          type=\"text\"\n          id=\"postTitle\"\n          name=\"postTitle\"\n          value={title}\n          onChange={onTitleChanged}\n        />\n        <label htmlFor=\"postContent\">Content:</label>\n        <textarea\n          id=\"postContent\"\n          name=\"postContent\"\n          value={content}\n          onChange={onContentChanged}\n        />\n        <button type=\"button\" onClick={onSavePostClicked}>\n          Save Post\n        </button>\n      </form>\n    </section>\n  )\n}\n","import React from 'react'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from 'react-router-dom'\n\nimport { Navbar } from './app/Navbar'\n\nimport { PostsList } from './features/posts/PostsList'\nimport { AddPostForm } from './features/posts/AddPostForm'\n\nfunction App() {\n  return (\n    <Router>\n      <Navbar />\n      <div className=\"App\">\n        <Switch>\n          <Route\n            exact\n            path=\"/\"\n            render={() => (\n              <React.Fragment>\n                <AddPostForm />\n                <PostsList />\n              </React.Fragment>\n            )}\n          />\n          <Redirect to=\"/\" />\n        </Switch>\n      </div>\n    </Router>\n  )\n}\n\nexport default App\n","import {\n  Server,\n  Model,\n  Factory,\n  belongsTo,\n  hasMany,\n  association,\n  RestSerializer,\n} from 'miragejs'\n\nimport { nanoid } from '@reduxjs/toolkit'\n\nimport faker from 'faker'\nimport { sentence, paragraph, article, setRandom } from 'txtgen'\nimport { parseISO } from 'date-fns'\nimport seedrandom from 'seedrandom'\n\nconst IdSerializer = RestSerializer.extend({\n  serializeIds: 'always',\n})\n\n// Set up a seeded random number generator, so that we get\n// a consistent set of users / entries each time the page loads.\n// This can be reset by deleting this localStorage value,\n// or turned off by setting `useSeededRNG` to false.\nlet useSeededRNG = true\n\nlet rng = seedrandom()\n\nif (useSeededRNG) {\n  let randomSeedString = localStorage.getItem('randomTimestampSeed')\n  let seedDate\n\n  if (randomSeedString) {\n    seedDate = new Date(randomSeedString)\n  } else {\n    seedDate = new Date()\n    randomSeedString = seedDate.toISOString()\n    localStorage.setItem('randomTimestampSeed', randomSeedString)\n  }\n\n  rng = seedrandom(randomSeedString)\n  setRandom(rng)\n  faker.seed(seedDate.getTime())\n}\n\nfunction getRandomInt(min, max) {\n  min = Math.ceil(min)\n  max = Math.floor(max)\n  return Math.floor(rng() * (max - min + 1)) + min\n}\n\nconst randomFromArray = (array) => {\n  const index = getRandomInt(0, array.length - 1)\n  return array[index]\n}\n\nconst notificationTemplates = [\n  'poked you',\n  'says hi!',\n  `is glad we're friends`,\n  'sent you a gift',\n]\n\nnew Server({\n  routes() {\n    this.namespace = 'fakeApi'\n    //this.timing = 2000\n\n    this.resource('users')\n    this.resource('posts')\n    this.resource('comments')\n\n    const server = this\n\n    this.post('/posts', function (schema, req) {\n      const data = this.normalizedRequestAttrs()\n      data.date = new Date().toISOString()\n      // Work around some odd behavior by Mirage that's causing an extra\n      // user entry to be created unexpectedly when we only supply a userId.\n      // It really want an entire Model passed in as data.user for some reason.\n      const user = schema.users.find(data.userId)\n      data.user = user\n\n      if (data.content === 'error') {\n        throw new Error('Could not save the post!')\n      }\n\n      const result = server.create('post', data)\n      return result\n    })\n\n    this.get('/posts/:postId/comments', (schema, req) => {\n      const post = schema.posts.find(req.params.postId)\n      return post.comments\n    })\n\n    this.get('/notifications', (schema, req) => {\n      const numNotifications = getRandomInt(1, 5)\n\n      let pastDate\n\n      const now = new Date()\n\n      if (req.queryParams.since) {\n        pastDate = parseISO(req.queryParams.since)\n      } else {\n        pastDate = new Date(now.valueOf())\n        pastDate.setMinutes(pastDate.getMinutes() - 15)\n      }\n\n      // Create N random notifications. We won't bother saving these\n      // in the DB - just generate a new batch and return them.\n      const notifications = [...Array(numNotifications)].map(() => {\n        const user = randomFromArray(schema.db.users)\n        const template = randomFromArray(notificationTemplates)\n        return {\n          id: nanoid(),\n          date: faker.date.between(pastDate, now).toISOString(),\n          message: template,\n          user: user.id,\n          read: false,\n          isNew: true,\n        }\n      })\n\n      return { notifications }\n    })\n  },\n  models: {\n    user: Model.extend({\n      posts: hasMany(),\n    }),\n    post: Model.extend({\n      user: belongsTo(),\n      comments: hasMany(),\n    }),\n    comment: Model.extend({\n      post: belongsTo(),\n    }),\n    notification: Model.extend({}),\n  },\n  factories: {\n    user: Factory.extend({\n      id() {\n        return nanoid()\n      },\n      firstName() {\n        return faker.name.firstName()\n      },\n      lastName() {\n        return faker.name.lastName()\n      },\n      name() {\n        return faker.name.findName(this.firstName, this.lastName)\n      },\n      username() {\n        return faker.internet.userName(this.firstName, this.lastName)\n      },\n\n      afterCreate(user, server) {\n        server.createList('post', 3, { user })\n      },\n    }),\n    post: Factory.extend({\n      id() {\n        return nanoid()\n      },\n      title() {\n        return sentence()\n      },\n      date() {\n        return faker.date.recent(7)\n      },\n      content() {\n        return article(1)\n      },\n      reactions() {\n        return {\n          thumbsUp: 0,\n          hooray: 0,\n          heart: 0,\n          rocket: 0,\n          eyes: 0,\n        }\n      },\n      afterCreate(post, server) {\n        //server.createList('comment', 3, { post })\n      },\n\n      user: association(),\n    }),\n    comment: Factory.extend({\n      id() {\n        return nanoid()\n      },\n      date() {\n        return faker.date.past(2)\n      },\n      text() {\n        return paragraph()\n      },\n      post: association(),\n    }),\n  },\n  serializers: {\n    user: IdSerializer,\n    post: IdSerializer,\n    comment: IdSerializer,\n  },\n  seeds(server) {\n    server.createList('user', 3)\n  },\n})\n","import { configureStore } from '@reduxjs/toolkit'\n\nimport postsReducer from '../features/posts/postsSlice'\n\nexport default configureStore({\n  reducer: {\n    posts: postsReducer,\n  },\n})\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport store from './app/store'\nimport { Provider } from 'react-redux'\n\nimport './api/server'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}